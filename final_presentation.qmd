---
title: "Final Project Presentation"
author: "Eric Seltzer"
format: revealjs
---

## Introduction to Data

API Package called nbastatR. When you use the API package it creates data frames. The one I used for this project is done using the teams_shots() function. Below is an example of what is in the data frame.
```{r}
#| warning: false
library(nbastatR)
library(tidyverse)
library(knitr)
library(ggplot2)
library(cowplot)
library(modelr)
library(broom)
Sys.setenv(VROOM_CONNECTION_SIZE=500000)
teams <-
  nba_teams() |>
  filter(isNonNBATeam == 0) |>
  filter(!is.na(colorsTeam))

teams <-
  teams_shots(teams = "Golden State Warriors",
              seasons = 2024)
teams <-
  teams |>
  filter(namePlayer == "Stephen Curry")

player <-
  teams |>
  mutate(isShotMade = as.numeric(isShotMade))
kable(head(player))
```

## Question/Questions
There was no exact question for this project, but more a problem that I wanted to solve. It is hard to look at what type of statistics you want to see when analyzing a NBA player, for instance they aren't in the same place. I wanted to create something that allowed someone to look at what I consider to be most of the important metrics.

## Visualization 1
```{r}
#| warning: false
circle_points = function(center = c(0, 0),
                         radius = 1,
                         npoints = 360) {
  angles = seq(0, 2 * pi, length.out = npoints)
  return(data_frame(
    x = center[1] + radius * cos(angles),
    y = center[2] + radius * sin(angles)
  ))
}

# Court Dimensions & lines
width = 50
height = 94 / 2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14

# Court themes
court_themes = list(
  light = list(
    court = 'ivory',
    lines = '#999999',
    text = '#222222',
    made = '#00bfc4',
    missed = '#f8766d',
    hex_border_size = 1,
    hex_border_color = "ivory"
  ),
  dark = list(
    court = '#000004',
    lines = '#999999',
    text = '#f0f0f0',
    made = '#00bfc4',
    missed = '#f8766d',
    hex_border_size = 0,
    hex_border_color = "#000000"
  ),
  ppt = list(
    court = 'gray20',
    lines = 'white',
    text = '#f0f0f0',
    made = '#00bfc4',
    missed = '#f8766d',
    hex_border_size = 0,
    hex_border_color = "gray20"
  )
)

# Function to create court based on given dimensions
plot_court = function(court_theme = court_themes$light,
                      use_short_three = FALSE) {
  if (use_short_three) {
    three_point_radius = 22
    three_point_side_height = 0
  }
  
  court_points = data_frame(
    x = c(width / 2, width / 2,-width / 2,-width / 2, width / 2),
    y = c(height, 0, 0, height, height),
    desc = "perimeter"
  )
  
  court_points = bind_rows(court_points , data_frame(
    x = c(
      outer_key_width / 2,
      outer_key_width / 2,
      -outer_key_width / 2,
      -outer_key_width / 2
    ),
    y = c(0, key_height, key_height, 0),
    desc = "outer_key"
  ))
  
  court_points = bind_rows(court_points , data_frame(
    x = c(-backboard_width / 2, backboard_width / 2),
    y = c(backboard_offset, backboard_offset),
    desc = "backboard"
  ))
  
  court_points = bind_rows(court_points , data_frame(
    x = c(0, 0),
    y = c(backboard_offset, backboard_offset + neck_length),
    desc = "neck"
  ))
  
  foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)
  
  foul_circle_top = filter(foul_circle, y > key_height) %>%
    mutate(desc = "foul_circle_top")
  
  foul_circle_bottom = filter(foul_circle, y < key_height) %>%
    mutate(
      angle = atan((y - key_height) / x) * 180 / pi,
      angle_group = floor((angle - 5.625) / 11.25),
      desc = paste0("foul_circle_bottom_", angle_group)
    ) %>%
    filter(angle_group %% 2 == 0) %>%
    select(x, y, desc)
  
  hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) %>%
    mutate(desc = "hoop")
  
  restricted = circle_points(center = c(0, hoop_center_y), radius = 4) %>%
    filter(y >= hoop_center_y) %>%
    mutate(desc = "restricted")
  
  three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) %>%
    filter(y >= three_point_side_height, y >= hoop_center_y)
  
  three_point_line = data_frame(
    x = c(
      three_point_side_radius,
      three_point_side_radius,
      three_point_circle$x,
      -three_point_side_radius,
      -three_point_side_radius
    ),
    y = c(
      0,
      three_point_side_height,
      three_point_circle$y,
      three_point_side_height,
      0
    ),
    desc = "three_point_line"
  )
  
  court_points = bind_rows(
    court_points,
    foul_circle_top,
    foul_circle_bottom,
    hoop,
    restricted,
    three_point_line
  )
  
  court_points <- court_points
  
  # Final plot creation
  ggplot() +
    geom_path(data = court_points,
              aes(x = x, y = y, group = desc),
              color = court_theme$lines) +
    coord_fixed(ylim = c(0, 45), xlim = c(-25, 25)) +
    theme_minimal(base_size = 22) +
    theme(
      text = element_text(color = court_theme$text),
      plot.background = element_rect(fill = 'ivory', color = 'black'),
      panel.background = element_rect(fill = court_theme$court, color = court_theme$court),
      panel.grid = element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.title = element_blank(),
      axis.ticks = element_blank(),
      legend.background = element_rect(fill = court_theme$court, color = court_theme$court),
      legend.margin = margin(-1, 0, 0, 0, unit = "lines"),
      legend.position = "bottom",
      legend.key = element_blank(),
      legend.text = element_text(size = rel(1.0))
    )
}
teams <-
  teams |>
  mutate(x = as.numeric(as.character(locationX)) / 10,
         y = as.numeric(as.character(locationY)) / 10 + hoop_center_y)
```

```{r}
#| warning: false
p1 <-
  plot_court(court_themes$light,
             use_short_three = T) +
  geom_point(
    data = teams,
    aes(
      x = x,
      y = y,
      color = isShotMade,
      fill = isShotMade
    ),
    size = 3,
    shape = 21,
    stroke = .5
  ) +
  scale_color_manual(
    values = c("green4", "red3"),
    aesthetics = "color",
    labels = c("Made", "Missed")
  ) +
  scale_fill_manual(
    values = c("green2", "gray20"),
    aesthetics = "fill",
    labels = c("Made", "Missed")
  ) +
  scale_x_continuous(limits = c(-27.5, 27.5)) +
  scale_y_continuous(limits = c(0, 45)) +
  theme(
    plot.title = element_text(
      hjust = .5,
      size = 22,
      family = "Times New Roman",
      face = "bold",
      vjust = -4
    ),
    plot.subtitle = element_text(
      hjust = .5,
      size = 10,
      family = "Times New Roman",
      face = "bold",
      vjust = -8
    ),
    legend.position = c(.5, .98),
    legend.direction = "horizontal",
    legend.title = element_blank(),
    legend.text = element_text(
      hjust = .5,
      size = 10,
      family = "Times New Roman",
      face = "bold",
      colour = "black"
    ),
    plot.caption = element_text(
      hjust = .5,
      size = 6,
      family = "Times New Roman",
      face = "bold",
      colour = "lightgrey",
      vjust = 8
    )
  ) +
  labs(title = "Stephen Curry Shot Chart")

ggdraw(p1) + theme(plot.background = element_rect(fill = "ivory", color = NA))
```

## Visualization 2
```{r}
mod <- glm(isShotMade ~ distanceShot,
           data = player,
           family = "binomial")

grid <-
  data_grid(player,
            distanceShot = seq_range(distanceShot, n = 1000))

aug <-
  augment(mod,
          newdata = grid,
          se_fit = TRUE)

aug <-
  aug |>
  mutate(.predprob = (exp(.fitted) / (1 + exp(.fitted)))) |>
  mutate(min = .predprob - .se.fit,
         max = .predprob + .se.fit)
```

```{r}
made <-
  player |>
  filter(isShotMade == 1)

missed <-
  player |>
  filter(isShotMade == 0)
```

```{r}
ggplot(aug,
       aes(x = distanceShot,
           y = .predprob)) +
  geom_line(linewidth = 1.2,
            colour = "blue") +
  geom_rug(data = made,
           sides = "t",
           alpha = 0.3,
           aes(y = isShotMade)) +
  geom_rug(data = missed,
           sides = "b",
           alpha = 0.3,
           aes(y = isShotMade)) +
  geom_ribbon(aes(ymin = min,
                  ymax = max),
              fill = "blue",
              alpha = 0.2) +
  scale_x_continuous(breaks = seq(0, 70, 20)) +
  theme_minimal() +
  labs(x = "Shot Distance",
       y = "Predicted Probability",
       title = "Stephen Curry Shot Make Probability Model") +
  theme(
    panel.background = element_rect(fill = "ivory"),
    plot.background = element_rect(fill = "ivory"),
    plot.title = element_text(family = "Times New Roman")
  )
```

